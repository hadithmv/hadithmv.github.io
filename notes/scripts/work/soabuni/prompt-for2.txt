"""
Both code snippets aim to fetch data from an API and save it to a JSON file. However, there are significant differences in their approach, especially regarding efficiency and scalability.

Advantages of the First Code (Using aiohttp and asyncio):
Asynchronous Execution:

The first code uses aiohttp and asyncio to fetch data asynchronously. This allows multiple requests to be processed concurrently, which can significantly reduce the overall runtime compared to the second code, which processes requests sequentially.
Progress Tracking:

The use of tqdm in the first code provides a progress bar, giving real-time feedback on the fetching process, which is particularly useful for long-running tasks.
Logging:

The first code includes logging to track the progress and handle errors more systematically. This is beneficial for debugging and maintaining a clear record of the script's execution.
Command-Line Arguments:

The first code allows users to specify the range of Surahs to fetch via command-line arguments, making it more flexible and reusable without modifying the script.
Advantages of the Second Code (Using requests):
Simplicity:

The second code is simpler and easier to understand for those who are less familiar with asynchronous programming. It uses requests, which is more straightforward than setting up an asynchronous environment.
No External Dependencies Beyond Requests:

The second code relies solely on requests, whereas the first code requires aiohttp, asyncio, tqdm, and argparse, increasing the complexity and number of dependencies.
When to Use Each:
Use the First Code if:

You need to fetch a large number of Surahs (e.g., the entire Quran) efficiently.
You want better control over the process with logging, progress tracking, and command-line options.
You are comfortable with asynchronous programming or need a solution that scales better.
Use the Second Code if:

You are fetching a small number of Surahs and simplicity is more important than performance.
You prefer a more straightforward approach and are not concerned about the performance trade-offs.
Conclusion:
The first code is generally better for large-scale, performance-critical tasks due to its asynchronous nature, progress tracking, and logging capabilities. However, if simplicity and ease of understanding are more important, and performance is not a concern, the second code might be preferable.


...



this code is fast and efficient and async all, but the issue is

the output is like:

{
    "id": 6217,
    "surah_id": 111,
    "ayah": 1,
    "content": "تَبَّتْ يَدَآ أَبِى لَهَبٍ وَتَبَّ ﴿١﴾",
    "created_at": null,
    "updated_at": "2023-10-12T10:00:33.000000Z",
    "thafseer": {
      "id": 3243,
      "ayah_id": 6217,
      "translation": "أبولهب ގެ ދެއަތް ގެއްލި ހަލާކުވެދާށިއެވެ! (އެބަހީ: أبولهب އަށް ހަލާކު ހުށްޓެވެ.) އަދި އޭނާ ގެއްލި ހަލާކުވެއްޖެއެވެ. (1)",
      "thafseer": "މި ސޫރަތް ބާވައިލެއްވީ އަބާއްޖަވެރިޔާ އަބޫލަހަބާ ބެހޭގޮތުންނެވެ. އޭނާއީ ރަސޫލުﷲ ﷺ އަށް ޢަދާވާތްތެރިކަންتَبَّ﴾ ބާވައިލެއްވިއެވެ. (ޞަޙީޙު މުސްލިމް، ޙަދީޘު؛ 208)",
      "title": null,
      "note": null,
      "created_at": "2023-10-12T10:00:33.000000Z",
      "updated_at": "2023-10-12T10:00:33.000000Z"
    }
  },
  {
    "id": 6218,
...
    "id": 6220,
...
    "id": 6221,
...
    "id": 4584,
...
    "id": 6218,
...
    "id": 4585,
...

and so on

those first level ids should be in order, from "1" then "2" then "3" until the last number

...

claude:

import asyncio
import aiohttp
import json
import argparse
from tqdm import tqdm
import logging
from pathlib import Path

# Setup logging to track the script's progress and any errors
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Configuration for the API request
BASE_URL = "https://quranthafseeru.com/read/{}"
HEADERS = {
    "Accept": "application/json",
    "X-Inertia": "true",
    "X-Inertia-Version": "540510c2ac4712bd7d9e3ffb5e475022",
    "X-Requested-With": "XMLHttpRequest",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0"
}

async def fetch_quran_data(session, surah_number):
    """
    Asynchronously fetch data for a single Surah.
    """
    url = BASE_URL.format(surah_number)
    async with session.get(url, headers=HEADERS) as response:
        if response.status == 200:
            data = await response.json()
            return surah_number, data['props']['ayahs']
        else:
            logging.error(f"Error: Received status code {response.status} for Surah {surah_number}")
            return surah_number, None

async def main(start_surah, end_surah):
    """
    Main function to fetch data for a range of Surahs.
    """
    surah_ayahs = {}
    async with aiohttp.ClientSession() as session:
        # Create a list of tasks for each Surah
        tasks = [fetch_quran_data(session, surah_number) for surah_number in range(start_surah, end_surah + 1)]
        
        # Execute tasks concurrently and collect results
        for completed_task in tqdm(asyncio.as_completed(tasks), total=end_surah-start_surah+1, desc="Fetching Surahs"):
            surah_number, result = await completed_task
            if result:
                surah_ayahs[surah_number] = result

    # Flatten the list of ayahs while maintaining order
    all_ayahs = []
    for surah_number in range(start_surah, end_surah + 1):
        if surah_number in surah_ayahs:
            all_ayahs.extend(surah_ayahs[surah_number])

    # Save the collected data to a JSON file
    output_file = Path('quran_ayahs.json')
    with output_file.open('w', encoding='utf-8') as f:
        json.dump(all_ayahs, f, ensure_ascii=False, indent=2)

    logging.info(f"All ayahs data saved to {output_file}")

if __name__ == "__main__":
    # Set up command-line argument parsing
    parser = argparse.ArgumentParser(description="Fetch Quran data for specified Surah range.")
    parser.add_argument("--start", type=int, default=1, help="Starting Surah number")
    parser.add_argument("--end", type=int, default=114, help="Ending Surah number")
    args = parser.parse_args()

    # Run the main async function
    asyncio.run(main(args.start, args.end))
    
"""

